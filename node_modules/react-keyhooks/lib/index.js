"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeybindingProvider = exports.KeybindingContext = exports.NumKeyToNumber = exports.addKeybinding = exports.useSharedKeyListener = exports.useKeyListener = exports.useNav = exports.NumPadKey = exports.NumKey = exports.Key = void 0;
const React = require("react");
var Key;
(function (Key) {
    Key[Key["TAB"] = 9] = "TAB";
    Key[Key["ENTER"] = 13] = "ENTER";
    Key[Key["SHIFT"] = 16] = "SHIFT";
    Key[Key["ESCAPE"] = 27] = "ESCAPE";
    Key[Key["LEFT"] = 37] = "LEFT";
    Key[Key["UP"] = 38] = "UP";
    Key[Key["RIGHT"] = 39] = "RIGHT";
    Key[Key["DOWN"] = 40] = "DOWN";
    Key[Key["A"] = 65] = "A";
    Key[Key["B"] = 66] = "B";
    Key[Key["C"] = 67] = "C";
    Key[Key["D"] = 68] = "D";
    Key[Key["E"] = 69] = "E";
    Key[Key["F"] = 70] = "F";
    Key[Key["G"] = 71] = "G";
    Key[Key["H"] = 72] = "H";
    Key[Key["I"] = 73] = "I";
    Key[Key["J"] = 74] = "J";
    Key[Key["K"] = 75] = "K";
    Key[Key["L"] = 76] = "L";
    Key[Key["M"] = 77] = "M";
    Key[Key["N"] = 78] = "N";
    Key[Key["O"] = 79] = "O";
    Key[Key["P"] = 80] = "P";
    Key[Key["Q"] = 81] = "Q";
    Key[Key["R"] = 82] = "R";
    Key[Key["S"] = 83] = "S";
    Key[Key["T"] = 84] = "T";
    Key[Key["U"] = 85] = "U";
    Key[Key["V"] = 86] = "V";
    Key[Key["W"] = 87] = "W";
    Key[Key["X"] = 88] = "X";
    Key[Key["Y"] = 89] = "Y";
    Key[Key["Z"] = 90] = "Z";
    Key[Key["SLASH"] = 191] = "SLASH";
    Key[Key["QUESTION"] = 191] = "QUESTION";
})(Key = exports.Key || (exports.Key = {}));
var NumKey;
(function (NumKey) {
    NumKey[NumKey["ZERO"] = 48] = "ZERO";
    NumKey[NumKey["ONE"] = 49] = "ONE";
    NumKey[NumKey["TWO"] = 50] = "TWO";
    NumKey[NumKey["THREE"] = 51] = "THREE";
    NumKey[NumKey["FOUR"] = 52] = "FOUR";
    NumKey[NumKey["FIVE"] = 53] = "FIVE";
    NumKey[NumKey["SIX"] = 54] = "SIX";
    NumKey[NumKey["SEVEN"] = 55] = "SEVEN";
    NumKey[NumKey["EIGHT"] = 56] = "EIGHT";
    NumKey[NumKey["NINE"] = 57] = "NINE";
})(NumKey = exports.NumKey || (exports.NumKey = {}));
var NumPadKey;
(function (NumPadKey) {
    NumPadKey[NumPadKey["ZERO"] = 96] = "ZERO";
    NumPadKey[NumPadKey["ONE"] = 97] = "ONE";
    NumPadKey[NumPadKey["TWO"] = 98] = "TWO";
    NumPadKey[NumPadKey["THREE"] = 99] = "THREE";
    NumPadKey[NumPadKey["FOUR"] = 100] = "FOUR";
    NumPadKey[NumPadKey["FIVE"] = 101] = "FIVE";
    NumPadKey[NumPadKey["SIX"] = 102] = "SIX";
    NumPadKey[NumPadKey["SEVEN"] = 103] = "SEVEN";
    NumPadKey[NumPadKey["EIGHT"] = 104] = "EIGHT";
    NumPadKey[NumPadKey["NINE"] = 105] = "NINE";
})(NumPadKey = exports.NumPadKey || (exports.NumPadKey = {}));
// useNav adds simple stateful navigation to your component
// Returns:
//   - pos: indicates current position
//   - nav: fxn that accepts an integer that represents number to increment/decrement pos
//   - reset: fxn that sets current position to -1
// Accepts:
//   - upperBound: maximum value that pos can grow to
//   - init: optional initial value for pos
const useNav = (upperBound, init) => {
    const [pos, setPos] = React.useState(init || -1);
    const isInBounds = (p) => p < upperBound && p > -1;
    const nav = (val) => {
        const newPos = pos + val;
        return isInBounds(newPos) ? setPos(newPos) === null : false;
    };
    const reset = () => {
        setPos(-1);
    };
    return [pos, nav, reset];
};
exports.useNav = useNav;
const handlePress = (e, state) => {
    const { groups, groupForKey } = state;
    const g = groupForKey[e.keyCode];
    if (groups[g]) {
        let allPressed = true;
        groups[g][e.keyCode].pressed = true;
        for (const i of Object.keys(groups[g])) {
            const k = parseInt(i, 10);
            const key = groups[g][k];
            if (!key.pressed) {
                allPressed = false;
            }
        }
        if (allPressed) {
            const prevent = groups[g][e.keyCode].action(e.keyCode);
            if (prevent) {
                e.preventDefault();
            }
        }
    }
};
const handleKeyUp = (e, state) => {
    const { groups, groupForKey } = state;
    const g = groupForKey[e.keyCode];
    if (groups[g]) {
        groups[g][e.keyCode].pressed = false;
    }
};
const useKeyListen = (state) => {
    const localKeyPress = (e) => handlePress(e, state);
    const localKeyUp = (e) => handleKeyUp(e, state);
    React.useEffect(() => {
        document.addEventListener('keydown', localKeyPress);
        document.addEventListener('keyup', localKeyUp);
        return () => {
            document.removeEventListener('keydown', localKeyPress);
            document.removeEventListener('keyup', localKeyUp);
        };
    }, [state]);
};
const useKeyListener = () => {
    let state = NewGroupMap();
    useKeyListen(state);
    return (keys, action, combo) => {
        state = exports.addKeybinding(state, keys, action, combo);
    };
};
exports.useKeyListener = useKeyListener;
const useSharedKeyListener = () => {
    const state = NewGroupMap();
    useKeyListen(state);
    return state;
};
exports.useSharedKeyListener = useSharedKeyListener;
const NewGroupMap = () => {
    const groupForKey = {};
    const groups = {};
    return {
        groups,
        groupForKey,
        index: 0,
    };
};
const addKeybinding = (state, keys, action, combo) => {
    const { groups, groupForKey } = state;
    let index = state.index;
    if (Array.isArray(keys)) {
        let g = index;
        for (const key of keys) {
            // create association between this key and its group
            groupForKey[key] = index;
            if (!groups[g]) {
                groups[index] = {};
            }
            groups[index][key] = {
                group: g,
                action,
                pressed: false,
            };
            if (!combo) {
                g = g + 1;
            }
        }
        index = g + 1;
    }
    else {
        groupForKey[keys] = index;
        if (!groups[index]) {
            groups[index] = {};
        }
        groups[index][keys] = {
            group: index,
            action,
            pressed: false,
        };
        index = index + 1;
    }
    return { groups, groupForKey, index };
};
exports.addKeybinding = addKeybinding;
const NumKeyToNumber = (key) => {
    if (key > 47 && key < 58) {
        return key - 48;
    }
    else if (key > 95 && key < 106) {
        return key - 96;
    }
    return -1;
};
exports.NumKeyToNumber = NumKeyToNumber;
exports.KeybindingContext = React.createContext({
    keybindingState: NewGroupMap(),
    useKeybinding: (keys, action, combo) => null,
});
const KeybindingProvider = (props) => {
    let keybindingState = exports.useSharedKeyListener();
    const useKeybinding = (keys, action, combo) => {
        keybindingState = exports.addKeybinding(keybindingState, keys, action, combo);
    };
    return React.createElement(exports.KeybindingContext.Provider, { value: { keybindingState, useKeybinding } }, props.children);
};
exports.KeybindingProvider = KeybindingProvider;
